{
  "version": 3,
  "sources": ["../../../src/worker/worker-types.ts", "../../../src/worker/uci-wasm-worker.ts"],
  "sourcesContent": ["\nexport type SendToWorker = {\n    name: 'counter-go',\n} | {\n    name: 'perft-setup',\n    fen: string,\n    depth: number,\n} | SendToWorkerWithResponse;\n\nexport type SendToWorkerWithResponse = ({\n    name: 'counter-count',\n} | {\n    name: 'perft-count',\n} | {\n    name: 'uci',\n    line: string,\n} | {\n    name: 'uci-flush-output',\n}) & { id: number };\n\nexport function encodeSendToWorker(msg: SendToWorker): string {\n    return JSON.stringify(msg);\n}\n\nexport function decodeSendToWorker(msg: string): SendToWorker {\n    return JSON.parse(msg);\n}\n\nexport type ReceiveFromWorkerMessage = ({\n    name: 'ready',\n} | {\n    name: 'log',\n    msg: Array<any>,\n} | {\n    name: 'error',\n    msg: string,\n}) & {\n    kind: 'message',\n};\n\nexport type ReceiveFromWorker = ReceiveFromWorkerMessage | ReceiveFromWorkerResponse;\n\nexport type ReceiveFromWorkerResponse = ({\n    name: 'counter-count',\n    counterResult: number,\n} | {\n    name: 'perft-count',\n    perftResult: number,\n} | {\n    name: 'uci',\n    output: string,\n} | {\n    name: 'uci-flush-output',\n    output: string,\n}) & {\n    kind: 'response',\n    id: number,\n};\n\nexport function isEmpty(msg: ReceiveFromWorker): boolean {\n    if (msg.name === 'log') {\n        return msg.msg.length === 0;\n    } else if (msg.name === 'uci') {\n        return msg.output.length === 0;\n    } else if (msg.name === 'uci-flush-output') {\n        return msg.output.length === 0;\n    }\n    return false\n}\n\nexport function isResponse(msg: ReceiveFromWorker): msg is ReceiveFromWorkerResponse {\n    return msg.kind === 'response' && msg.id !== undefined;\n}\n\nexport function responseMatchesRequest<\n    S extends SendToWorkerWithResponse,\n    R extends ReceiveFromWorkerResponse & Pick<S, \"name\">\n>(msg: SendToWorkerWithResponse, response: ReceiveFromWorker): response is R {\n    return isResponse(response) && response.id === msg.id && response.name === msg.name;\n}\n\nexport function encodeReceiveFromWorker(msg: ReceiveFromWorker): string {\n    return JSON.stringify(msg);\n}\n\nexport function decodeReceiveFromWorker(msg: string): ReceiveFromWorker {\n    return JSON.parse(msg);\n}\n", "import { ReceiveFromWorker, SendToWorkerWithResponse, decodeSendToWorker, encodeReceiveFromWorker } from \"./worker-types\";\n\nimportScripts('../../lib/wasm-pack/wasm_chess.js');\n\nfunction send(msg: ReceiveFromWorker) {\n    self.postMessage(encodeReceiveFromWorker(msg));\n}\n\n\nglobalThis.BindingsJs = {\n    log_to_js: function (msg) {\n        send({ kind: 'message', name: 'log', msg: [msg] });\n    }\n};\n\nasync function setupUciForJs(): Promise<{ handleEvent: (MessageEvent: any) => boolean }> {\n    let uciForJs = await wasm_bindgen.UciForJs.new();\n    let uciThinkLoop: ReturnType<typeof setInterval> | undefined = undefined;\n\n    let output: string[] = [];\n    uciThinkLoop = setInterval(() => {\n        let out = uciForJs.think().trim();\n        if (out.length > 0) {\n            output.push(out);\n        }\n    }, 1);\n\n    function flush(request: SendToWorkerWithResponse & { name: 'uci-flush-output' | 'uci' }) {\n        send({\n            kind: 'response',\n            name: request.name,\n            id: request.id,\n            output:\n                output.map(v => v.trim()).filter(line => line.length > 0).join('\\n')\n        });\n        output = [];\n    }\n\n    // handle messages passed to the worker\n    return {\n        handleEvent: (e: MessageEvent) => {\n            let data = decodeSendToWorker(e.data);\n\n            switch (data.name) {\n                case 'uci': {\n                    let out = uciForJs.handle_line(data.line).trim();\n                    if (out.length > 0) {\n                        output.push(out);\n                    }\n                    flush(data);\n                    return true;\n                }\n                case 'uci-flush-output': {\n                    flush(data);\n                    return true;\n                }\n                default:\n                    return false;\n            }\n        }\n    }\n}\n\n\nasync function init_wasm_in_worker() {\n    // load the wasm\n    await wasm_bindgen('../../lib/wasm-pack/wasm_chess_bg.wasm');\n\n    let uci = await setupUciForJs();\n\n    // handle messages passed to the worker\n    self.onmessage = async e => {\n        let data = decodeSendToWorker(e.data);\n\n        if (uci.handleEvent(e)) {\n            return;\n        }\n\n        send({ kind: 'message', name: 'error', msg: `unknown message: ${data}` });\n    };\n\n    send({ kind: 'message', name: 'ready' });\n};\n\ninit_wasm_in_worker();"],
  "mappings": ";AAwBO,SAAS,mBAAmB,KAA2B;AAC1D,SAAO,KAAK,MAAM,GAAG;AACzB;AAuDO,SAAS,wBAAwB,KAAgC;AACpE,SAAO,KAAK,UAAU,GAAG;AAC7B;;;ACjFA,cAAc,mCAAmC;AAEjD,SAAS,KAAK,KAAwB;AAClC,OAAK,YAAY,wBAAwB,GAAG,CAAC;AACjD;AAGA,WAAW,aAAa;AAAA,EACpB,WAAW,SAAU,KAAK;AACtB,SAAK,EAAE,MAAM,WAAW,MAAM,OAAO,KAAK,CAAC,GAAG,EAAE,CAAC;AAAA,EACrD;AACJ;AAEA,eAAe,gBAA0E;AACrF,MAAI,WAAW,MAAM,aAAa,SAAS,IAAI;AAC/C,MAAI,eAA2D;AAE/D,MAAI,SAAmB,CAAC;AACxB,iBAAe,YAAY,MAAM;AAC7B,QAAI,MAAM,SAAS,MAAM,EAAE,KAAK;AAChC,QAAI,IAAI,SAAS,GAAG;AAChB,aAAO,KAAK,GAAG;AAAA,IACnB;AAAA,EACJ,GAAG,CAAC;AAEJ,WAAS,MAAM,SAA0E;AACrF,SAAK;AAAA,MACD,MAAM;AAAA,MACN,MAAM,QAAQ;AAAA,MACd,IAAI,QAAQ;AAAA,MACZ,QACI,OAAO,IAAI,OAAK,EAAE,KAAK,CAAC,EAAE,OAAO,UAAQ,KAAK,SAAS,CAAC,EAAE,KAAK,IAAI;AAAA,IAC3E,CAAC;AACD,aAAS,CAAC;AAAA,EACd;AAGA,SAAO;AAAA,IACH,aAAa,CAAC,MAAoB;AAC9B,UAAI,OAAO,mBAAmB,EAAE,IAAI;AAEpC,cAAQ,KAAK,MAAM;AAAA,QACf,KAAK,OAAO;AACR,cAAI,MAAM,SAAS,YAAY,KAAK,IAAI,EAAE,KAAK;AAC/C,cAAI,IAAI,SAAS,GAAG;AAChB,mBAAO,KAAK,GAAG;AAAA,UACnB;AACA,gBAAM,IAAI;AACV,iBAAO;AAAA,QACX;AAAA,QACA,KAAK,oBAAoB;AACrB,gBAAM,IAAI;AACV,iBAAO;AAAA,QACX;AAAA,QACA;AACI,iBAAO;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AACJ;AAGA,eAAe,sBAAsB;AAEjC,QAAM,aAAa,wCAAwC;AAE3D,MAAI,MAAM,MAAM,cAAc;AAG9B,OAAK,YAAY,OAAM,MAAK;AACxB,QAAI,OAAO,mBAAmB,EAAE,IAAI;AAEpC,QAAI,IAAI,YAAY,CAAC,GAAG;AACpB;AAAA,IACJ;AAEA,SAAK,EAAE,MAAM,WAAW,MAAM,SAAS,KAAK,oBAAoB,IAAI,GAAG,CAAC;AAAA,EAC5E;AAEA,OAAK,EAAE,MAAM,WAAW,MAAM,QAAQ,CAAC;AAC3C;AAEA,oBAAoB;",
  "names": []
}
